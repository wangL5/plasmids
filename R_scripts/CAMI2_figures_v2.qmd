---
title: "CAMI2 Benchmarking Data"
author: "Lu Wang"
date: "2025-08-30"
format: pdf
editor: visual
---

## CAMI2 Marine Metagenome Benchmarking

Data was generated as follows:

1.  Assembled CAMI2 marine environmental metagenome reads with megahit and metaplasmidSPAdes
2.  Ran assembled contigs against 9 plasmid classifiers
3.  To identify "True Plasmid" contigs, used minimap2 to map plasmid contigs back against CAMI2 reference genomes
4.  Calculated \# of True Positives (TP), True Negatives (TN), and False Negatives (FN) and calculated Precision, Recall, and F-1 Score

### CAMI2 Assembly

#### CAMI2 Assembly Metrics

CAMI2 marine metagenome reads were assembled with megahit and megaplasmidSPAdes assemblers.

| Sample Num | megahit               | metaplasmidSPAdes  |
|------------|-----------------------|--------------------|
| 0          | N50 = 1257, n = 51721 | N50 = 4679, n = 40 |
| 1          | N50 = 1108, n = 71820 | N50 = 4964, n = 30 |
| 2          | N50 = 992, n = 91063  | N50 = 5121, n = 30 |
| 3          | N50 = 1027, n = 83748 | N50 = 4679, n = 31 |
| 4          | N50 = 1372, n = 38594 | N50 = 4771, n = 24 |
| 5          | N50 = 1191, n = 42925 | N50 = 6573, n = 14 |
| 6          | N50 = 1164, n = 61432 | N50 = 5121, n = 26 |
| 7          | N50 = 1246, n = 55098 | N50 = 5423, n = 25 |
| 8          | N50 = 884, n = 97838  | N50 = 4504, n = 32 |
| 9          | N50 = 1259, n = 49681 | N50 = 5062, n = 25 |

Megahit assemblies were more fragmented than metaplasmidSPAdes. Minimap2 data showed 1:1 mapping between metaplasmidSPAdes contigs and CAMI2 plasmid reference genomes. Mapping data between megahit contigs and CAMI2 plasmid reference genomes showed a range of assembly fragmentation, from 1 contig mapped per reference genome, to the highest of 33 contigs mapped per reference genome.

Of the 108 plasmid reference genomes from CAMI2, metaplasmidSPAdes assemblies had at least one contig map to 107 reference genomes, while megahit had at least one contig map to all 108 plasmid reference genomes. (metaplasmidSPAdes missing RNODE_116_length_4192_cov_3.28201)

#### Megahit contig fragmentation

```{r}
#| echo: False

mapping_data <- read.csv("megahit_minimap_combined_mapping_data.txt", sep="\t")
```

```{r}
#| echo: False
library(ggplot2)
library(viridis)
library(scales)
library(dplyr)

mapping_data_transformed <- mapping_data %>%
  mutate(
    # log scale for dot size - confirmed no 0s 
    log_val = log(Num_Query_Sequences),
    Sample_Number = factor(Sample.Number))
```

```{r}
#| echo: False
mapping_dot_plot <- ggplot(mapping_data_transformed, aes(x = Sample_Number, y=Target_Sequence)) + geom_point(aes(size = log_val, color = Num_Query_Sequences), alpha = 0.8) +
  scale_color_viridis_c(
    name = "Number of Contigs\n(log scale)",
    trans = "log10", # transformation of the color scale
    breaks = c(1, 2, 5, 10, 20, 35),
    option = "plasma", # color scale
    guide = guide_colorbar(barwidth = 1, barheight=8)
  ) +
  scale_size_continuous(
    name = "Count (log scale)",
    range = c(0.5, 5),
    breaks = log(c(1,2,5,10,20,35)),
    labels = c("1", "2", "5", "10", "20", "35"),
    guide = "none"
  ) + 
  theme_minimal() + 
  theme(
    axis.text.y = element_blank(),
    plot.title = element_text(hjust=0.5)) + 
  labs (
    title = "Megahit Contigs per CAMI2 Plasmid Reference Genome",
    y = "CAMI2 Plasmid Reference Genomes (108)",
    x = "CAMI2 Marine Metagenome Samples"
  )
  
```

```{r}
#| echo: False
print(mapping_dot_plot)
```

```{r}
# doing it as a heatmap instead

library(tidyr)
library(tidyverse)

megahit_fragment_wide <- mapping_data_transformed %>%
  pivot_wider(id_cols = Target_Sequence, names_from = Sample_Number, values_from = log_val) %>%
  column_to_rownames(var = "Target_Sequence") %>%
  as.matrix()
```

```{r}
# make heatmap 

library(pheatmap)
library(viridis)

pheatmap(megahit_fragment_wide, 
         main = "Megahit Contigs per CAMI2 Plasmid Reference Genome", 
         show_rownames = FALSE,
         scale = "none",
         cluster_cols = FALSE,
         cluster_rows = FALSE,
         legend_title = "Log10 Contig Count")
```

This figure shows that while most of the megahit contig mappings back to the CAMI2 reference genomes were 1:1, there were other reference genomes that were fragmented during megahit assembly. Mapping coverage ranged from X to X%.

#### Megahit contig recruitment plots \### MAKE RECRUITMENT PLOT or COVERAGE PLOT \#

```{r}
#| echo: False

# insert recruitment plot of most fragmented reference genomes 
```

### CAMI2 Plasmid Classifier Benchmarking

Read in benchmarking data

```{r}
#| echo: false

per_contig_data <- read.csv("per_contig_classification_results.txt", header=TRUE, sep="\t")
```

#### Benchmarking: contig level

1.  Mapped all contigs against CAMI2 plasmid reference genomes, and obtained a list of "True Plasmid" contigs
2.  Comparing the list of "True Plasmid" contigs against the list of contigs from all 9 plasmid classifiers, obtained a list of the total number of TP, TN, and FN for each plasmid classifier
3.  Calculated precision, recall, and F-1 score for each plasmid classifier

```{r}
#| echo: false

library(ggplot2)

clean_labels = c("DMC" = "DeepMicroClass", "genomad" = "geNomad", "mobrecon" = "MobRecon", "plasclass" = "PlasClass", "plasme" = "PLASMe", "plasmidfinder" = "Plasmidfinder", "plasx05" = "PlasX (0.5)", "plasx075" = "PlasxX (0.75)", "plasx09" = "Plasx (0.9)", "platon" = "Platon", "vv" = "viralVerify")

f1_score_boxplot <- ggplot(per_contig_data, aes(x = classifier, y = f1_score, fill = assembler)) + geom_boxplot(position = position_dodge(width=0.8)) + 
  scale_fill_manual(values=c("orange", "cornflowerblue"), labels = c("megahit", "metaplasmidSPAdes")) + 
  theme_minimal(base_size = 14) +
  labs(title = "CAMI2 Plasmid Benchmarking: F1 Score by Classifier and Assembler", x = "", y = "", fill = "",
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(face = "bold"),
    plot.title = element_text(hjust=0.5),
    panel.grid.major.x = element_blank(),
    legend.position="bottom"
  ) + 
  scale_x_discrete(labels = clean_labels)
plot(f1_score_boxplot)
```

F-1 score for all 9 plasmid classification tools compared against megahit and metaplasmidSPAdes assembly datasets (showing PlasX at 3 score threshold cut off points). No output for plasmidfinder because there were no True Positives predicted for either assembly dataset. F-1 score better for all classifiers using metaplasmidSPAdes assembly dataset. Plasx with 0.5 cut off had the highest F-1 score.

```{r}
#| echo: false

# CAMI2 Precision-Recall Figure
library(ggplot2)
library(dplyr)
library(pals)

CAMI2_PR_curve <- ggplot(per_contig_data, aes(x = recall, y = precision, color = classifier)) + scale_color_manual(values=unname(alphabet()), labels = clean_labels) +
  # clean_labels defined above in F1 boxplot 
  geom_point(alpha = 0.7, size = 2) +
  facet_wrap(~ assembler, labeller = as_labeller(c("mpSPAdes" = "metaplasmidSPAdes", "megahit" = "megahit"))) +
  labs(
    title = "Precision vs Recall by Assembler and Classifier",
    x = "Recall",
    y = "Precision",
    color = "Classifier"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(face = "bold"),
    legend.position = "bottom",
    plot.title = element_text(hjust=0.5)
  )
plot(CAMI2_PR_curve)

```

-   Every classifier outperformed plasmid classification using metaplasmidSPAdes assemblies compared to megahit assemblies. Caveat - would be careful about direct comparison though - metaplasmidSPAdes only had \~100s of contigs to work with (since there were 200 circular elements total), while megahit had 400k-500k contigs to work with.

-   The best performing classifiers using metaplasmidSPades assemblies: **DeepMicroClass, PlasX, geNomad**. However - where DeepMicroClass fails (and where most of these fail) is when encountering megahit assemblies - resulting in false positives that reduce its precision to nearly 0 for all 10 CAMI2 samples. The classifier most robust to megahit - fragmented assemblies - is PlasX.

-   **\### need to include log transformed contig sizes here \###**

#### Benchmarking: plasmid reference genomes

108 plasmid reference genomes in the CAMI2 dataset. These heatmaps show, for each reference genome, how many times they were detected by each of the plasmid classifiers, out of the 10 CAMI2 samples.

```{r}
#| echo: false

# read in data
mpspades_data <- read.csv("mpspades_heatmap.csv", row.names = 1)
megahit_data <- read.csv("megahit_heatmap.csv", row.names=1)
```

```{r}
#| echo: false
# renaming the matrix columns 

colnames(mpspades_data) <- clean_labels[colnames(mpspades_data)]
colnames(megahit_data) <- clean_labels[colnames(megahit_data)]

```

```{r}
#| echo: false
library(pheatmap)
library(RColorBrewer)
```

```{r}
#| echo: false

annotation_colors <- list(contig_length = colorRampPalette(brewer.pal(3,'PuBu'))(100),
                          coverage = colorRampPalette(brewer.pal(3, 'Spectral'))(100))

pheatmap(mpspades_data, 
         main = "MetaplasmidSPAdes Plasmid Reference Detection Rates (%)", 
         show_rownames = FALSE, 
         color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100))
         # annotation_row = filtered_plasmid_CE_annotations,
         #annotation_names_row = F)  
```

```{r}

#| echo: false
pheatmap(megahit_data, 
         main = "Megahit Plasmid Reference Detection Rates (%)",
         show_rownames = FALSE, 
         color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100))
         #annotation_row = filtered_plasmid_CE_annotations,
         #annotation_names_row = F)
```

### Plasmid reference genome investigation

Of the top performing classifiers (DeepMicroClass, geNomad, and PlasX), geNomad and PlasX shared groups of contigs that they were unable to classify. (Interestingly, the DeepMicroClass used the CAMI2 dataset as one of its benchmarking datasets). Why were certain reference genomes classified over others? What genomic traits, if any, are present in one group vs. the other? Looked into plasmid reference genome characteristics to determine

Tried: Mobsuite (mobtyper) and PLSDB did not provide sufficient information.

What do geNomad and plasX algorithms have in common? They both use gene families at some point in their analysis. geNomad also has a deep learning model that uses one-hot encoded tetranucleotides to detect 4mer patterns.

#### Reference genome characteristics:

##### Number of Genes:

-   GC content

-   \### plot GC content vs. contig size of original plasmid (there's supposed to be a correlation here), and then plot GC content vs. contig size and whether it was detected

    -   plot plasx score/genoamad score against: GC content, contig length, num gene calls

-   diversity in gene families? or type of gene families? (plasx data)

    -   Group 1 vs Group 2:

        -   Are there less pfam/cog families? Are there more mmseqs families? no, there is no statistical difference

        -   Is it more likely for it not to hit a pfam/cog/mmseqs family at all? no, there is no statistical difference

        -   Are there certain pfam/cog/mmseqs families that are found more frequently in Group 2? **nothing statistically different**

    -   **Summary:**

        -   3 reference genomes did not have any pfam/cog/de novo family hits - these were not classified by genomad or plasx

        -   1 reference genome not assembled by metaplasmidspades. This reference genome had 39 hits to pfam/cog/de novo fams

        -   4 plasmid reference genomes did not have any known gene families (pfam or cag) hits. Of those 4 includes the 3 reference genomes that had no known or de novo gene family hits.

        -   104/108 CAMI plasmids had at least 1 hit to a pfam/cog family. Most of these plasmids had genes in "known" gene families. 73/108 had at least 1 hit to an mmseqs de novo gene cluster

            -   no significant difference in detection groups in the plasmids w/o a hit to a de novo gene family

            -   status combined: 72 reference genomes

            -   known only: 32 reference genomes

            -   no fams: 3 reference genomes

            -   de novo fam only: 1 reference genome

```{r}
# read in mpspades query_target metadata file 

mpspades_query_target = read.csv("query_target_metadata_mpSPAdes_all.txt", sep="\t")
```

```{r}
# set NAs to zero
mpspades_query_target[is.na(mpspades_query_target)] = 0
```

```{r}
library(ggplot2)
library(pals)
library(ggpmisc)

mpspades_plasmid_contig_detect <- ggplot(mpspades_query_target, aes(x = contig_length, y = num_gene_calls_contig, color = mpspades_detection, group = mpspades_detection)) + scale_color_manual(values=unname(alphabet()), labels = clean_labels) +
  geom_point(alpha = 0.7, size=2) +
  #stat_ellipse(aes(fill = mpspades_detection), alpha = 0.1, type = "norm", level = 0.95) +
  #geom_smooth(method = "lm", se = TRUE, alpha = 0.2, linewidth = 1) + 
  #stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "*\", \"*")), 
               #formula = y ~ x, parse = TRUE, size = 3) +
  labs(
    title = "Gene Calls (contigs) vs. Contig Length",
    x = "Contig Length",
    y = "Number of Gene Calls (contig)",
    color = "detection status"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(face = "bold"),
    legend.position = "bottom",
    plot.title = element_text(hjust=0.5)
  )
plot(mpspades_plasmid_contig_detect)

```

-   Many of the plasX contigs were marked with 0 score, due to having no hits to pfam/cog/de novo gene families

    ```{r}
    library(vegan)
    library(pairwiseAdonis)

    # analyze the centroids of scatter plots --> looking at contig_length vs. num gene calls
    # create distance matrix and test centroid differences
    dist_matrix <- dist(mpspades_query_target[, c("contig_length", "num_gene_calls_contig")])
    #adonis2(dist_matrix ~ mpspades_detection, data = mpspades_query_target)

    # centroids are significantly different 
    #          Df   SumOfSqs      R2      F Pr(>F)    
    # Model      2  856330655 0.10624 43.863  0.001 ***
    # Residual 738 7203980343 0.89376                  
    # Total    740 8060310997 1.00000   

    pairwise_adonis <- pairwise.adonis(dist_matrix, mpspades_query_target$mpspades_detection)
    print(pairwise_adonis)

    # detected vs. undetected genomad plasx: F.model = 67.93, p adjusted = 0.003
    # detected vs. undetected genomad: F.model = 21.37, p.adjusted = 0.003
    # undetected genomad plasx vs. undetected genomad: F.model = 43.80460, p.adjusted = 0.003
    ```

-   To further visualize these plasmid circular element groupings (detected, undetected_genomad, undetected_genomad_plasx \[cut off at 0.9)\], some boxplots of various metadata:

    ```{r}
    plasmid_CE_annotations <- read.csv("plasmid_CE_metadata.txt", sep="\t")

    library(ggplot2)
    library(tidyverse)

    plasmid_CE_long <- plasmid_CE_annotations %>% 
      select(mpspades_detection, GC_content, num_gene_calls) %>%
      pivot_longer(cols = c(GC_content, num_gene_calls),
                   names_to = "metric",
                   values_to = "value")
    # drop #N/A
    plasmid_CE_long_filtered <- plasmid_CE_long[plasmid_CE_long$mpspades_detection != "", ]
    ```

    metaplasmidspades boxplots comparing plasmid reference genome metadata

    ```{r}
    ggplot(plasmid_CE_long_filtered, aes(x = mpspades_detection, y = value, fill = mpspades_detection)) +
      geom_boxplot(alpha = 0.7) +
      scale_fill_manual(values = c("detected" = "blue", 
                                   "undetected_genomad" = "darkorange",
                                   "undetected_genomad_plasx" = "red")) +
      labs(title = "Plasmid characteristics by detection group (mpspades)", fill = "Detection Status") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1),
            plot.title = element_text(hjust = 0.5),
            legend.position = "bottom",
            strip.text = element_text(size = 11, face = "bold"),
            axis.title.x = element_blank(),
            axis.title.y = element_blank()) +
      facet_wrap(~ metric, scales = "free_y", nrow = 1,
                 labeller = labeller(metric = c( 
                                               "GC_content" = "GC Content (%)", 
                                               "num_gene_calls" = "Number of Gene Calls")))
    ```

    -   gene calls: ANOVA p = 0.012, T-K posthoc, p = 0.016 for undetected_genomad_plasx vs. detected

    -   GC content: (variance significantly different, using KW) - p = 0.0001

-   megahit boxplots comparing plasmid reference genome metadata

    ```{r}
    plasmid_CE_long_megahit <- plasmid_CE_annotations %>% 
      select(megahit_detection, GC_content, num_gene_calls) %>%
      pivot_longer(cols = c(GC_content, num_gene_calls),
                   names_to = "metric",
                   values_to = "value")

    ggplot(plasmid_CE_long_megahit, aes(x = megahit_detection, y = value, fill = megahit_detection)) +
      geom_boxplot(alpha = 0.7) +
      scale_fill_manual(values = c("detected" = "blue", 
                                   "undetected_genomad" = "darkorange",
                                   "undetected_genomad_plasx" = "red")) +
      labs(title = "Plasmid characteristics by detection group (megahit)", fill = "Detection Status") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1),
            plot.title = element_text(hjust = 0.5),
            legend.position = "bottom",
            strip.text = element_text(size = 11, face = "bold"),
            axis.title.x = element_blank(),
            axis.title.y = element_blank()) +
      facet_wrap(~ metric, scales = "free_y", nrow = 1,
                 labeller = labeller(metric = c("GC_content" = "GC Content (%)", 
                                               "num_gene_calls" = "Number of Gene Calls")))
    ```

-   gene calls: ANOVA p = 0.011

    -   undetected_genomad_plasx vs. detected: p = 0.0199

-   GC content: (variance significantly different, using KW): p = 0.018, Games-Howell posthoc:

    -   detected vs. undetected genomad_plasx: 0.005

    -   undetected_genomad vs. undetected genomad_plasx: 0.000255

```{r}
# creating a new binary variable (for both megahit and mpspades) to look at differences between detected and undetected

plasmid_CE_annotations <- read.csv("plasmid_CE_metadata.txt", sep="\t")

plasmid_CE_annotations_mpspades <- plasmid_CE_annotations

plasmid_CE_annotations_mpspades <- plasmid_CE_annotations_mpspades[plasmid_CE_annotations_mpspades$mpspades_detection != "", ]

plasmid_CE_annotations_mpspades$mpspades_binary <- ifelse(
  plasmid_CE_annotations_mpspades$mpspades_detection == "detected", 
  "detected", 
  "undetected"
)

```

```{r}
plasmid_CE_annotations$megahit_binary <- ifelse(
  plasmid_CE_annotations$megahit_detection == "detected", 
  "detected", 
  "undetected"
)
```

```{r}
plasmid_CE_long_megahit_binary <- plasmid_CE_annotations %>% 
  select(megahit_binary, GC_content, num_gene_calls) %>%
  pivot_longer(cols = c(GC_content, num_gene_calls),
               names_to = "metric",
               values_to = "value")

plasmid_CE_long_mpspades_binary <- plasmid_CE_annotations_mpspades %>% 
  select(mpspades_binary, GC_content, num_gene_calls) %>%
  pivot_longer(cols = c(GC_content, num_gene_calls),
               names_to = "metric",
               values_to = "value")
```

```{r}
ggplot(plasmid_CE_long_mpspades_binary, aes(x = mpspades_binary, y = value, fill = mpspades_binary)) +
  geom_boxplot(alpha = 0.7) +
  scale_fill_manual(values = c("detected" = "blue", 
                               "undetected" = "red")) +
  labs(title = "Plasmid characteristics by detection group (mpspades)", fill = "Detection Status") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5),
        legend.position = "bottom",
        strip.text = element_text(size = 11, face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  facet_wrap(~ metric, scales = "free_y", nrow = 1,
             labeller = labeller(metric = c( 
                                           "GC_content" = "GC Content (%)", 
                                           "num_gene_calls" = "Number of Gene Calls")))
```

```{r}
wilcox.test(GC_content ~ mpspades_binary, data = plasmid_CE_annotations_mpspades)

# p = 0.9699
# W = 1409.5
```

```{r}
wilcox.test(num_gene_calls ~ mpspades_binary, data = plasmid_CE_annotations_mpspades)

# p = 6.524e-05
# W = 2030
```

```{r}
wilcox.test(GC_content ~ megahit_binary, data = plasmid_CE_annotations)

# W = 1416.5
# p = 0.9554
```

```{r}
wilcox.test(num_gene_calls ~ megahit_binary, data = plasmid_CE_annotations)

# p = 4.696e-05
# W = 2073.5
```

```{r}
ggplot(plasmid_CE_long_megahit_binary, aes(x = megahit_binary, y = value, fill = megahit_binary)) +
  geom_boxplot(alpha = 0.7) +
  scale_fill_manual(values = c("detected" = "blue", 
                               "undetected" = "red")) +
  labs(title = "Plasmid characteristics by detection group (megahit)", fill = "Detection Status") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5),
        legend.position = "bottom",
        strip.text = element_text(size = 11, face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  facet_wrap(~ metric, scales = "free_y", nrow = 1,
             labeller = labeller(metric = c("GC_content" = "GC Content (%)", 
                                           "num_gene_calls" = "Number of Gene Calls")))
```

GC content plotted against num gene calls

```{r}
GC_num_genes_mpspades <- ggplot(plasmid_CE_annotations_mpspades, aes(x = num_gene_calls, y = contig_length, size = GC_content, color = mpspades_detection, group = mpspades_detection)) + scale_color_manual(values=unname(alphabet()), labels = clean_labels) +
  geom_point(alpha = 0.7, size=2) +
  #geom_smooth(method = "lm", se = TRUE, alpha = 0.2, linewidth = 1) + 
  #stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "*\", \"*")), 
               #formula = y ~ x, parse = TRUE, size = 3) +
  labs(
    title = "Reference Genome GC content vs. Num Gene Calls",
    x = "num gene calls",
    y = "GC content",
    color = "detection status (mpspades)",
    size = "contig_length"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(face = "bold"),
    legend.position = "bottom",
    plot.title = element_text(hjust=0.5)
  )
plot(GC_num_genes_mpspades)
```

-   Tetranucleotide frequencies

    -   after calculating the tetranucleotide frequencies - PCA? It would provide further information on genomad.
