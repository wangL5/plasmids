classifiers <- c("dmc", "genomad", "plasx05", "plasx075", "plasx09", "platon")
colors <- c("dmc" = "#F0A0FF",        # amethyst
"genomad" = "#0075DC",    # blue
"plasx05" = "#2BCE48",    # green
"plasx075" = "#FFCC99",   # honeydew
"plasx09" = "#808080",    # iron
"platon" = "#94FFB5")     # jade
# New axis labels
new_axis_labels <- c("Accuracy", "Precision", "Recall", "Specificity", "FPR")
# Filter and prepare radar data
radar_data <- CAMI2_benchmarking_metrics %>%
filter(assembler == "mpspades", classifier %in% classifiers) %>%
group_by(classifier) %>%
summarise(across(c(accuracy, precision, recall, specificity, false_positive_rate), mean), .groups = "drop") %>%
rename_with(~ gsub("mean_", "", .x))  # Optional clean-up
# Rescale data (ggradar expects data between 0 and 1)
#radar_data_rescaled <- radar_data %>%
#  mutate(across(-Classifier, scales::rescale))  # Rescale only numeric columns
# Convert the data to tidy format for ggradar
ggradar_df <- radar_data %>%
rename(group = classifier)
# Set custom axis labels by changing column names in the data
colnames(ggradar_df)[-1] <- new_axis_labels  # Rename all columns except the first one (group)
# Create a list to store each plot
plots <- list()
# Generate radar plots for each classifier
for (clf in classifiers) {
clf_data <- ggradar_df %>%
filter(group == clf)
p <- ggradar(clf_data,
group.colours = colors[clf],
axis.label.size = 2,   # font size for axis labels
grid.label.size = 3,   # font size for grid labels (0, 50, 100)
group.line.width = 1,  # line width for classifiers
group.point.size = 3,  # point size at the data locations
background.circle.colour = "white",  # Background color of the circle
legend.title = "classifier",
legend.position = "bottom")   # Position the legend
p <- p + ggtitle(clf)
plots[[clf]] <- p  # Store the plot
}
# Combine all plots into a single figure
combined_plot <- plots[["dmc"]] + plots[["genomad"]] + plots[["plasx05"]] +
plots[["plasx075"]] + plots[["plasx09"]] + plots[["platon"]] +
plot_layout(ncol = 3)  # Arrange in a 3-column layout
# Show the combined plot
print(combined_plot)
# Optionally, save the combined figure
#ggsave("combined_radar_plots.png", combined_plot, width = 12, height = 10)
library(ggradar)
library(dplyr)
library(scales)
library(patchwork)
# Define classifier list and colors
classifiers <- c("dmc", "genomad", "plasx05", "plasx075", "plasx09", "platon")
colors <- c("dmc" = "#F0A0FF",        # amethyst
"genomad" = "#0075DC",    # blue
"plasx05" = "#2BCE48",    # green
"plasx075" = "#FFCC99",   # honeydew
"plasx09" = "#808080",    # iron
"platon" = "#94FFB5")     # jade
# New axis labels
new_axis_labels <- c("Accuracy", "Precision", "Recall", "Specificity", "FPR")
# Filter and prepare radar data
radar_data <- CAMI2_benchmarking_metrics %>%
filter(assembler == "mpspades", classifier %in% classifiers) %>%
group_by(classifier) %>%
summarise(across(c(accuracy, precision, recall, specificity, false_positive_rate), mean), .groups = "drop") %>%
rename_with(~ gsub("mean_", "", .x))  # Optional clean-up
# Rescale data (ggradar expects data between 0 and 1)
#radar_data_rescaled <- radar_data %>%
#  mutate(across(-Classifier, scales::rescale))  # Rescale only numeric columns
# Convert the data to tidy format for ggradar
ggradar_df <- radar_data %>%
rename(group = classifier)
# Set custom axis labels by changing column names in the data
colnames(ggradar_df)[-1] <- new_axis_labels  # Rename all columns except the first one (group)
# Create a list to store each plot
plots <- list()
# Generate radar plots for each classifier
for (clf in classifiers) {
clf_data <- ggradar_df %>%
filter(group == clf)
p <- ggradar(clf_data,
group.colours = colors[clf],
axis.label.size = 2,   # font size for axis labels
grid.label.size = 3,   # font size for grid labels (0, 50, 100)
group.line.width = 1,  # line width for classifiers
group.point.size = 3,  # point size at the data locations
background.circle.colour = "white",  # Background color of the circle
legend.title = "classifier",
legend.position = "bottom")   # Position the legend
p <- p + ggtitle(clf) + theme(
plot.title = element_text(hjust=0.5, size=5)
)
plots[[clf]] <- p  # Store the plot
}
# Combine all plots into a single figure
combined_plot <- plots[["dmc"]] + plots[["genomad"]] + plots[["plasx05"]] +
plots[["plasx075"]] + plots[["plasx09"]] + plots[["platon"]] +
plot_layout(ncol = 3)  # Arrange in a 3-column layout
# Show the combined plot
print(combined_plot)
# Optionally, save the combined figure
#ggsave("combined_radar_plots.png", combined_plot, width = 12, height = 10)
library(ggradar)
library(dplyr)
library(scales)
library(patchwork)
# Define classifier list and colors
classifiers <- c("dmc", "genomad", "plasx05", "plasx075", "plasx09", "platon")
colors <- c("dmc" = "#F0A0FF",        # amethyst
"genomad" = "#0075DC",    # blue
"plasx05" = "#2BCE48",    # green
"plasx075" = "#FFCC99",   # honeydew
"plasx09" = "#808080",    # iron
"platon" = "#94FFB5")     # jade
# New axis labels
new_axis_labels <- c("Accuracy", "Precision", "Recall", "Specificity", "FPR")
# Filter and prepare radar data
radar_data <- CAMI2_benchmarking_metrics %>%
filter(assembler == "mpspades", classifier %in% classifiers) %>%
group_by(classifier) %>%
summarise(across(c(accuracy, precision, recall, specificity, false_positive_rate), mean), .groups = "drop") %>%
rename_with(~ gsub("mean_", "", .x))  # Optional clean-up
# Rescale data (ggradar expects data between 0 and 1)
#radar_data_rescaled <- radar_data %>%
#  mutate(across(-Classifier, scales::rescale))  # Rescale only numeric columns
# Convert the data to tidy format for ggradar
ggradar_df <- radar_data %>%
rename(group = classifier)
# Set custom axis labels by changing column names in the data
colnames(ggradar_df)[-1] <- new_axis_labels  # Rename all columns except the first one (group)
# Create a list to store each plot
plots <- list()
# Generate radar plots for each classifier
for (clf in classifiers) {
clf_data <- ggradar_df %>%
filter(group == clf)
p <- ggradar(clf_data,
group.colours = colors[clf],
axis.label.size = 2,   # font size for axis labels
grid.label.size = 3,   # font size for grid labels (0, 50, 100)
group.line.width = 1,  # line width for classifiers
group.point.size = 3,  # point size at the data locations
background.circle.colour = "white",  # Background color of the circle
legend.title = "classifier",
legend.position = "bottom")   # Position the legend
p <- p + ggtitle(clf) + theme(
plot.title = element_text(hjust=0.5, size=8)
)
plots[[clf]] <- p  # Store the plot
}
# Combine all plots into a single figure
combined_plot <- plots[["dmc"]] + plots[["genomad"]] + plots[["plasx05"]] +
plots[["plasx075"]] + plots[["plasx09"]] + plots[["platon"]] +
plot_layout(ncol = 3)  # Arrange in a 3-column layout
# Show the combined plot
print(combined_plot)
# Optionally, save the combined figure
#ggsave("combined_radar_plots.png", combined_plot, width = 12, height = 10)
library(ggradar)
library(dplyr)
library(scales)
library(patchwork)
# Define classifier list and colors
classifiers <- c("dmc", "genomad", "plasx05", "plasx075", "plasx09", "platon")
colors <- c("dmc" = "#F0A0FF",        # amethyst
"genomad" = "#0075DC",    # blue
"plasx05" = "#2BCE48",    # green
"plasx075" = "#FFCC99",   # honeydew
"plasx09" = "#808080",    # iron
"platon" = "#94FFB5")     # jade
# New axis labels
new_axis_labels <- c("Accuracy", "Precision", "Recall", "Specificity", "FPR")
# Filter and prepare radar data
radar_data <- CAMI2_benchmarking_metrics %>%
filter(assembler == "mpspades", classifier %in% classifiers) %>%
group_by(classifier) %>%
summarise(across(c(accuracy, precision, recall, specificity, false_positive_rate), mean), .groups = "drop") %>%
rename_with(~ gsub("mean_", "", .x))  # Optional clean-up
# Rescale data (ggradar expects data between 0 and 1)
#radar_data_rescaled <- radar_data %>%
#  mutate(across(-Classifier, scales::rescale))  # Rescale only numeric columns
# Convert the data to tidy format for ggradar
ggradar_df <- radar_data %>%
rename(group = classifier)
# Set custom axis labels by changing column names in the data
colnames(ggradar_df)[-1] <- new_axis_labels  # Rename all columns except the first one (group)
# Create a list to store each plot
plots <- list()
# Generate radar plots for each classifier
for (clf in classifiers) {
clf_data <- ggradar_df %>%
filter(group == clf)
p <- ggradar(clf_data,
group.colours = colors[clf],
axis.label.size = 2,   # font size for axis labels
grid.label.size = 3,   # font size for grid labels (0, 50, 100)
group.line.width = 1,  # line width for classifiers
group.point.size = 3,  # point size at the data locations
background.circle.colour = "white",  # Background color of the circle
legend.title = "classifier",
legend.position = "bottom")   # Position the legend
p <- p + ggtitle(clf) + theme(
plot.title = element_text(hjust=0.5, size=10, face = "bold")
)
plots[[clf]] <- p  # Store the plot
}
# Combine all plots into a single figure
combined_plot <- plots[["dmc"]] + plots[["genomad"]] + plots[["plasx05"]] +
plots[["plasx075"]] + plots[["plasx09"]] + plots[["platon"]] +
plot_layout(ncol = 3)  # Arrange in a 3-column layout
# Show the combined plot
print(combined_plot)
# Optionally, save the combined figure
#ggsave("combined_radar_plots.png", combined_plot, width = 12, height = 10)
ggsave("CAMI2_individual_radar_plots.png", p)
ggsave("CAMI2_individual_radar_plots.png", combined_plot, width=12, height=10)
ggsave("CAMI2_individual_radar_plots.png", combined_plot, width=12, height=8)
library(ggradar)
library(dplyr)
library(scales)
library(patchwork)
# Define classifier list and colors
classifiers <- c("dmc", "genomad", "plasx05", "plasx075", "plasx09", "platon")
colors <- c("dmc" = "#F0A0FF",        # amethyst
"genomad" = "#0075DC",    # blue
"plasx05" = "#2BCE48",    # green
"plasx075" = "#FFCC99",   # honeydew
"plasx09" = "#808080",    # iron
"platon" = "#94FFB5")     # jade
# New axis labels
new_axis_labels <- c("Accuracy", "Precision", "Recall", "Specificity", "FPR")
# Filter and prepare radar data
radar_data <- CAMI2_benchmarking_metrics %>%
filter(assembler == "mpspades", classifier %in% classifiers) %>%
group_by(classifier) %>%
summarise(across(c(accuracy, precision, recall, specificity, false_positive_rate), mean), .groups = "drop") %>%
rename_with(~ gsub("mean_", "", .x))  # Optional clean-up
# Rescale data (ggradar expects data between 0 and 1)
#radar_data_rescaled <- radar_data %>%
#  mutate(across(-Classifier, scales::rescale))  # Rescale only numeric columns
# Convert the data to tidy format for ggradar
ggradar_df <- radar_data %>%
rename(group = classifier)
# Set custom axis labels by changing column names in the data
colnames(ggradar_df)[-1] <- new_axis_labels  # Rename all columns except the first one (group)
# Create a list to store each plot
plots <- list()
# Generate radar plots for each classifier
for (clf in classifiers) {
clf_data <- ggradar_df %>%
filter(group == clf)
p <- ggradar(clf_data,
group.colours = colors[clf],
axis.label.size = 3,   # font size for axis labels
grid.label.size = 3,   # font size for grid labels (0, 50, 100)
group.line.width = 1,  # line width for classifiers
group.point.size = 3,  # point size at the data locations
background.circle.colour = "white",  # Background color of the circle
legend.title = "classifier",
legend.position = "bottom")   # Position the legend
p <- p + ggtitle(clf) + theme(
plot.title = element_text(hjust=0.5, size=10, face = "bold")
)
plots[[clf]] <- p  # Store the plot
}
# Combine all plots into a single figure
combined_plot <- plots[["dmc"]] + plots[["genomad"]] + plots[["plasx05"]] +
plots[["plasx075"]] + plots[["plasx09"]] + plots[["platon"]] +
plot_layout(ncol = 3)  # Arrange in a 3-column layout
# Show the combined plot
print(combined_plot)
ggsave("CAMI2_individual_radar_plots.png", combined_plot, width=12, height=8)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(pals)
# precision-recall curve
CAMI2_PR_curve <- ggplot(CAMI2_benchmarking_metrics, aes(x = recall, y = precision, color = classifier)) + scale_color_manual(values=unname(alphabet())) +
geom_point(alpha = 0.7, size = 2) +
facet_wrap(~ assembler) +
labs(
title = "Precision vs Recall by Assembler and Classifier",
x = "Recall",
y = "Precision",
color = "Classifier"
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.position = "bottom",
plot.title = element_text(hjust=0.5)
)
plot(CAMI2_PR_curve)
library(dplyr)
selected_means <- CAMI2_summary_metrics %>%
filter(classifier %in% c("genomad", "plasx075", "plasx09"),
assembler %in% c("megahit", "mpspades")) %>%
select(classifier, assembler, mean_precision, mean_recall)
print(selected_means)
# Plot boxplots by assembler and classifier
CAMI2_boxplot <- ggplot(CAMI2_benchmarking_bar_plot_df, aes(x = classifier, y = value, fill = assembler)) +
scale_fill_manual(values=c("orange", "cornflowerblue")) +
geom_boxplot(outlier.shape = NA, alpha = 0.8, position = position_dodge(width = 0.8)) +
facet_wrap(~metric, scales = "free_y", ncol = 2) +
theme_minimal(base_size = 14) +
labs(
title = "Performance Metrics by Classifier and Assembler", x = "", y = "", fill = "",
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold"),
plot.title = element_text(hjust=0.5)
)
plot(CAMI2_boxplot)
f1_score_boxplot <- ggplot(CAMI2_benchmarking_metrics, aes(x = classifier, y = f1_score, fill = assembler)) + geom_boxplot(position = position_dodge(width=0.8)) +
scale_fill_manual(values=c("orange", "cornflowerblue")) +
theme_minimal(base_size = 14) +
labs(title = "F1 Score by Classifier and Assembler", x = "", y = "", fill = "",
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold"),
plot.title = element_text(hjust=0.5),
panel.grid.major.x = element_blank()
)
plot(f1_score_boxplot)
f1_score_boxplot <- ggplot(CAMI2_benchmarking_metrics, aes(x = classifier, y = f1_score, fill = assembler)) + geom_boxplot(position = position_dodge(width=0.8)) +
scale_fill_manual(values=c("orange", "cornflowerblue")) +
theme_minimal(base_size = 14) +
labs(title = "F1 Score by Classifier and Assembler", x = "", y = "", fill = "",
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold"),
plot.title = element_text(hjust=0.5),
panel.grid.major.x = element_blank()
)
plot(f1_score_boxplot)
library(dplyr)
selected_means <- CAMI2_summary_metrics %>%
filter(classifier %in% c("genomad", "plasx05", "plasx075", "plasx09", "dmc"),
assembler %in% c("megahit", "mpspades")) %>%
select(classifier, assembler, mean_precision, mean_recall)
print(selected_means)
library(dplyr)
selected_means <- CAMI2_summary_metrics %>%
filter(classifier %in% c("genomad", "plasx05", "plasx075", "plasx09"),
assembler %in% c("megahit", "mpspades")) %>%
select(classifier, assembler, mean_precision, mean_recall)
print(selected_means)
library(ggradar)
library(dplyr)
library(scales)
library(patchwork)
# Define classifier list and colors
classifiers <- c("dmc", "genomad", "plasx05", "plasx075", "plasx09", "platon")
colors <- c("dmc" = "#F0A0FF",        # amethyst
"genomad" = "#0075DC",    # blue
"plasx05" = "#2BCE48",    # green
"plasx075" = "#FFCC99",   # honeydew
"plasx09" = "#808080",    # iron
"platon" = "#94FFB5")     # jade
# New axis labels
new_axis_labels <- c("Accuracy", "Precision", "Recall", "Specificity", "FPR")
# Filter and prepare radar data
radar_data <- CAMI2_benchmarking_metrics %>%
filter(assembler == "mpspades", classifier %in% classifiers) %>%
group_by(classifier) %>%
summarise(across(c(accuracy, precision, recall, specificity, false_positive_rate), mean), .groups = "drop") %>%
rename_with(~ gsub("mean_", "", .x))  # Optional clean-up
# Rescale data (ggradar expects data between 0 and 1)
#radar_data_rescaled <- radar_data %>%
#  mutate(across(-Classifier, scales::rescale))  # Rescale only numeric columns
# Convert the data to tidy format for ggradar
ggradar_df <- radar_data %>%
rename(group = classifier)
# Set custom axis labels by changing column names in the data
colnames(ggradar_df)[-1] <- new_axis_labels  # Rename all columns except the first one (group)
# Create a list to store each plot
plots <- list()
# Generate radar plots for each classifier
for (clf in classifiers) {
clf_data <- ggradar_df %>%
filter(group == clf)
p <- ggradar(clf_data,
group.colours = colors[clf],
axis.label.size = 3,   # font size for axis labels
grid.label.size = 3,   # font size for grid labels (0, 50, 100)
group.line.width = 1,  # line width for classifiers
group.point.size = 3,  # point size at the data locations
background.circle.colour = "white",  # Background color of the circle
legend.title = "classifier",
legend.position = "bottom")   # Position the legend
p <- p + ggtitle(clf) + theme(
plot.title = element_text(hjust=0.5, size=10, face = "bold")
)
plots[[clf]] <- p  # Store the plot
}
# Combine all plots into a single figure
combined_plot <- plots[["dmc"]] + plots[["genomad"]] + plots[["plasx05"]] +
plots[["plasx075"]] + plots[["plasx09"]] + plots[["platon"]] +
plot_layout(ncol = 3)  # Arrange in a 3-column layout
# Show the combined plot
print(combined_plot)
tinytex::install_tinytex()
## load in a bunch of data
CAMI2_benchmarking_bar_plot_df <- CAMI2_benchmarking_metrics %>%
pivot_longer(
cols = c(accuracy, precision, recall, specificity, false_positive_rate, f1_score),
names_to = "metric",
values_to = "value"
)
## load in a bunch of data
library(ggplot2)
library(dplyr)
library(tidyr)
library(pals)
CAMI2_benchmarking_bar_plot_df <- CAMI2_benchmarking_metrics %>%
pivot_longer(
cols = c(accuracy, precision, recall, specificity, false_positive_rate, f1_score),
names_to = "metric",
values_to = "value"
)
install.packages("readxl")
View(CAMI2_benchmarking_metrics)
getwd
getwd()
CAMI2_benchmarking_metrics_TP_contigs <- read.table("CAMI2_benchmarking_metrics_TPcontigs.tsv.txt", sep="\t", header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(pals)
View(CAMI2_benchmarking_metrics_TP_contigs)
# precision-recall curve
CAMI2_PR_curve_TP_contigs <- ggplot(CAMI2_benchmarking_metrics_TP_contigs, aes(x = recall, y = precision, color = classifier)) + scale_color_manual(values = unname(alphabet())) +
geom_point(aes(size = TP_contig_size), alpha = 0.7) +
facet_wrap(~ assembler) +
labs(
title = "Precision vs Recall by Assembler and Classifier",
x = "Recall",
y = "Precision",
color = "Classifier",
size = "TP contig size"
) +
scale_size_continuous(range = c(1, 10)) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.position = "bottom",
plot.title = element_text(hjust=0.5)
)
plot(CAMI2_PR_curve_TP_contigs)
# precision-recall curve
CAMI2_PR_curve_TP_contigs <- ggplot(CAMI2_benchmarking_metrics_TP_contigs, aes(x = recall, y = precision, color = classifier)) + scale_color_manual(values = unname(alphabet())) +
geom_point(aes(size = TP_contig_size), alpha = 0.7) +
facet_wrap(~ assembler) +
labs(
title = "Precision vs Recall by Assembler and Classifier",
x = "Recall",
y = "Precision",
color = "Classifier",
size = "TP contig size"
) +
scale_size_continuous(range = c(1, 5)) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.position = "bottom",
plot.title = element_text(hjust=0.5)
)
plot(CAMI2_PR_curve_TP_contigs)
# precision-recall curve
CAMI2_PR_curve_TP_contigs <- ggplot(CAMI2_benchmarking_metrics_TP_contigs, aes(x = recall, y = precision, color = classifier)) + scale_color_manual(values = unname(alphabet())) +
geom_point(aes(size = TP_contig_size), alpha = 0.7) +
facet_wrap(~ assembler) +
labs(
title = "Precision vs Recall by Assembler and Classifier",
x = "Recall",
y = "Precision",
color = "Classifier",
size = "TP contig size"
) +
scale_size_continuous(range = c(2, 10)) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.position = "bottom",
plot.title = element_text(hjust=0.5)
)
plot(CAMI2_PR_curve_TP_contigs)
# precision-recall curve
CAMI2_PR_curve_TP_contigs <- ggplot(CAMI2_benchmarking_metrics_TP_contigs, aes(x = recall, y = precision, color = classifier)) + scale_color_manual(values = unname(alphabet())) +
geom_point(aes(size = TP_contig_size), alpha = 0.7) +
facet_wrap(~ assembler) +
labs(
title = "Precision vs Recall by Assembler and Classifier",
x = "Recall",
y = "Precision",
color = "Classifier",
size = "TP contig size"
) +
scale_size_continuous(range = c(2, 10)) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.position = "right",
plot.title = element_text(hjust=0.5)
)
plot(CAMI2_PR_curve_TP_contigs)
