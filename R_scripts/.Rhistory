library(pheatmap)
library(RColorBrewer)
#color_scheme <- colorRampPalette(c("red", "yellow", "blue"))(100)
annotation_colors <- list(contig_length = colorRampPalette(brewer.pal(3,'PuBu'))(100),
coverage = colorRampPalette(brewer.pal(3, 'Spectral'))(100))
pheatmap(mpspades_data,
main = "Metaplasmidspades Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
pheatmap(megahit_data,
main = "Megahit Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
# grab only metadata of interest for annotation
filtered_plasmid_CE_annotations <- subset(plasmid_CE_annotations, select = -c(mpspades_genomad_0_block, mpspades_genomad_plasx_0_block))
# other columns: num_gene_calls, GC_content, contig_length, coverage, mpspades_genomad_0_block, mpspades_genomad_plasx_0_block, megahit_genomad_0_block, megahit_genomad_plasx_0_block
# contig length and coverage are of the original plasmid circular element reference genome, not of the assemblies
# GC content and num_gene_calls are also of the original plasmid circular element reference genome
library(pheatmap)
library(RColorBrewer)
#color_scheme <- colorRampPalette(c("red", "yellow", "blue"))(100)
annotation_colors <- list(contig_length = colorRampPalette(brewer.pal(3,'PuBu'))(100),
coverage = colorRampPalette(brewer.pal(3, 'Spectral'))(100))
pheatmap(mpspades_data,
main = "Metaplasmidspades Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
pheatmap(megahit_data,
main = "Megahit Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
# grab only metadata of interest for annotation
filtered_plasmid_CE_annotations <- subset(plasmid_CE_annotations, select = c(mpspades_genomad_0_block, mpspades_genomad_plasx_0_block))
# other columns: num_gene_calls, GC_content, contig_length, coverage, mpspades_genomad_0_block, mpspades_genomad_plasx_0_block, megahit_genomad_0_block, megahit_genomad_plasx_0_block
# contig length and coverage are of the original plasmid circular element reference genome, not of the assemblies
# GC content and num_gene_calls are also of the original plasmid circular element reference genome
library(pheatmap)
library(RColorBrewer)
#color_scheme <- colorRampPalette(c("red", "yellow", "blue"))(100)
annotation_colors <- list(contig_length = colorRampPalette(brewer.pal(3,'PuBu'))(100),
coverage = colorRampPalette(brewer.pal(3, 'Spectral'))(100))
pheatmap(mpspades_data,
main = "Metaplasmidspades Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
pheatmap(megahit_data,
main = "Megahit Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
# grab only metadata of interest for annotation
filtered_plasmid_CE_annotations <- subset(plasmid_CE_annotations, select = c(num_gene_calls, GC_content))
# other columns: num_gene_calls, GC_content, contig_length, coverage, mpspades_genomad_0_block, mpspades_genomad_plasx_0_block, megahit_genomad_0_block, megahit_genomad_plasx_0_block
# contig length and coverage are of the original plasmid circular element reference genome, not of the assemblies
# GC content and num_gene_calls are also of the original plasmid circular element reference genome
# for genomad_plasx_0 block, I took CEs with 0 detection by genomad and plasx (0.9 threshold) across all CAMI2 samples for that classifier
library(pheatmap)
library(RColorBrewer)
#color_scheme <- colorRampPalette(c("red", "yellow", "blue"))(100)
annotation_colors <- list(contig_length = colorRampPalette(brewer.pal(3,'PuBu'))(100),
coverage = colorRampPalette(brewer.pal(3, 'Spectral'))(100))
pheatmap(mpspades_data,
main = "Metaplasmidspades Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
pheatmap(megahit_data,
main = "Megahit Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
plasmid_CE_annotations <- read.csv("plasmid_CE_metadata.txt", row.names=1, sep="\t")
View(plasmid_CE_annotations)
plasmid_CE_annotations <- read.csv("plasmid_CE_metadata.txt", sep="\t")
library(ggplot2)
library(tidyverse)
plasmid_CE_long <- plasmid_CE_annotations %>%
select(mpspades_detection, GC_content, num_gene_calls, coverage) %>%
pivot_longer(cols = c(GC_content, num_gene_calls, coverage),
names_to = "metric",
values_to = "value")
R.version
View(plasmid_CE_long)
ggplot(plasmid_CE_long, aes(x = mpspades_detection, y = value, fill = mpspades_detection)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("detected" = "blue",
"undetected_genomad" = "darkorange",
"undetected_genomad_plasx" = "red")) +
labs(title = "Plasmid reference genome characteristics by detection group (metaplasmidspades)", fill = "Detection Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold")) +
facet_wrap(~ metric, scales = "free_y", nrow = 1,
labeller = labeller(metric = c("coverage" = "Coverage",
"GC_content" = "GC Content (%)",
"num_gene_calls" = "Number of Gene Calls")))
ggplot(plasmid_CE_long, aes(x = mpspades_detection, y = value, fill = mpspades_detection)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("detected" = "blue",
"undetected_genomad" = "darkorange",
"undetected_genomad_plasx" = "red")) +
labs(title = "Plasmid reference genome characteristics by detection group (metaplasmidspades)", fill = "Detection Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
facet_wrap(~ metric, scales = "free_y", nrow = 1,
labeller = labeller(metric = c("coverage" = "Coverage",
"GC_content" = "GC Content (%)",
"num_gene_calls" = "Number of Gene Calls")))
ggplot(plasmid_CE_long, aes(x = mpspades_detection, y = value, fill = mpspades_detection)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("detected" = "blue",
"undetected_genomad" = "darkorange",
"undetected_genomad_plasx" = "red")) +
labs(title = "Plasmid characteristics by detection group (mpspades)", fill = "Detection Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
facet_wrap(~ metric, scales = "free_y", nrow = 1,
labeller = labeller(metric = c("coverage" = "Coverage",
"GC_content" = "GC Content (%)",
"num_gene_calls" = "Number of Gene Calls")))
na.omit(plasmid_CE_long)
View(plasmid_CE_long)
plasmid_CE_long -> plasmid_CE_long %>% drop_na()
plasmid_CE_long %>% drop_na()
# drop  rows if 1+ column = NA
View(plasmid_CE_long)
# drop #N/A
plasmid_CE_long_filtered <- [plasmid_CE_long$mpspades_detection != "#N/A"]
# drop #N/A
plasmid_CE_long_filtered <- plasmid_CE_long[plasmid_CE_long$mpspades_detection != "#N/A"]
# drop #N/A
plasmid_CE_long_filtered <- plasmid_CE_long[plasmid_CE_long$mpspades_detection != "#N/A", ]
View(plasmid_CE_long_filtered)
# drop #N/A
plasmid_CE_long_filtered <- plasmid_CE_long[plasmid_CE_long$mpspades_detection != "#N/A", ]
ggplot(plasmid_CE_long_filtered, aes(x = mpspades_detection, y = value, fill = mpspades_detection)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("detected" = "blue",
"undetected_genomad" = "darkorange",
"undetected_genomad_plasx" = "red")) +
labs(title = "Plasmid characteristics by detection group (mpspades)", fill = "Detection Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
facet_wrap(~ metric, scales = "free_y", nrow = 1,
labeller = labeller(metric = c("coverage" = "Coverage",
"GC_content" = "GC Content (%)",
"num_gene_calls" = "Number of Gene Calls")))
plasmid_CE_long_megahit <- plasmid_CE_annotations %>%
select(megahit_detection, GC_content, num_gene_calls, coverage) %>%
pivot_longer(cols = c(GC_content, num_gene_calls, coverage),
names_to = "metric",
values_to = "value")
ggplot(plasmid_CE_long_megahit, aes(x = megahit_detection, y = value, fill = mpspades_detection)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("detected" = "blue",
"undetected_genomad" = "darkorange",
"undetected_genomad_plasx" = "red")) +
labs(title = "Plasmid characteristics by detection group (megahit)", fill = "Detection Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
facet_wrap(~ metric, scales = "free_y", nrow = 1,
labeller = labeller(metric = c("coverage" = "Coverage",
"GC_content" = "GC Content (%)",
"num_gene_calls" = "Number of Gene Calls")))
plasmid_CE_long_megahit <- plasmid_CE_annotations %>%
select(megahit_detection, GC_content, num_gene_calls, coverage) %>%
pivot_longer(cols = c(GC_content, num_gene_calls, coverage),
names_to = "metric",
values_to = "value")
ggplot(plasmid_CE_long_megahit, aes(x = megahit_detection, y = value, fill = megahit_detection)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("detected" = "blue",
"undetected_genomad" = "darkorange",
"undetected_genomad_plasx" = "red")) +
labs(title = "Plasmid characteristics by detection group (megahit)", fill = "Detection Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
facet_wrap(~ metric, scales = "free_y", nrow = 1,
labeller = labeller(metric = c("coverage" = "Coverage",
"GC_content" = "GC Content (%)",
"num_gene_calls" = "Number of Gene Calls")))
library(pheatmap)
library(RColorBrewer)
#color_scheme <- colorRampPalette(c("red", "yellow", "blue"))(100)
annotation_colors <- list(contig_length = colorRampPalette(brewer.pal(3,'PuBu'))(100),
coverage = colorRampPalette(brewer.pal(3, 'Spectral'))(100))
pheatmap(mpspades_data,
main = "Metaplasmidspades Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
pheatmap(megahit_data,
main = "Megahit Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
View(plasmid_CE_annotations)
library(dplyr)
str(plasmid_CE_annotations)
summary(plasmid_CE_annotations)
table(plasmid_CE_annotations$mpspades_detection)
table(plasmid_CE_annotations$megahit_detection)
library(dplyr)
str(plasmid_CE_annotations)
summary(plasmid_CE_annotations)
# table(plasmid_CE_annotations$mpspades_detection)
# table(plasmid_CE_annotations$megahit_detection)
library(dplyr)
str(plasmid_CE_annotations)
# summary(plasmid_CE_annotations)
# table(plasmid_CE_annotations$mpspades_detection)
# table(plasmid_CE_annotations$megahit_detection)
library(dplyr)
# str(plasmid_CE_annotations)
summary(plasmid_CE_annotations)
# table(plasmid_CE_annotations$mpspades_detection)
# table(plasmid_CE_annotations$megahit_detection)
library(dplyr)
# str(plasmid_CE_annotations)
# summary(plasmid_CE_annotations)
table(plasmid_CE_annotations$mpspades_detection)
# table(plasmid_CE_annotations$megahit_detection)
library(dplyr)
# str(plasmid_CE_annotations)
# summary(plasmid_CE_annotations)
# table(plasmid_CE_annotations$mpspades_detection)
table(plasmid_CE_annotations$megahit_detection)
install.packages("car")
# remove the NA for megahit analysis
plasmid_CE_annotations_megahit <- plasmid_CE_annotations[plasmid_CE_annotations$mpspades_detection != "#N/A", ]
# remove the NA for megahit analysis
plasmid_CE_annotations_mpspades <- plasmid_CE_annotations[plasmid_CE_annotations$mpspades_detection != "#N/A", ]
View(plasmid_CE_annotations_mpspades)
library(car)
# test for homogeneity of variances
leveneTest(num_gene_calls ~ mpspades_detection, data=plasmid_CE_annotations_mpspades)
leveneTest(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations)
leveneTest(GC_content ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
leveneTest(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
leveneTest(GC_content ~ megahit_detection, data = plasmid_CE_annotations)
leveneTest(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations)
library(vegan)
install.packages("vegan")
library(vegan)
# metaplasmidspades
metadata_mpspades_matrix <- plasmid_CE_annotations_mpspades[, c("num_gene_calls", "GC_content", "coverage")]
# rescale the variables
metadata_mpspades_matrix_scaled <- scale(metadata_mpspades_matrix)
# distance matrix (euclidean distance)
mpspades_metadata_distance_matrix <- dist(metadata_mpspades_matrix_scaled)
#metaplasmidspades permanova on 3 metadata groups
set.seed(5)
mpspades_metadata_permanova <- adonis2(mpspades_metadata_distance_matrix ~ mpspades_detection, data = plasmid_CE_annotations_mpspades, permutations = 9999,
method = "euclidean")
print(mpspades_metadata_permanova)
# check homogeneity of dispersion
mpspades_dispersion <- betadisper(mpspades_metadata_distance_matrix, df$mpspades_detection)
# check homogeneity of dispersion
mpspades_dispersion <- betadisper(mpspades_metadata_distance_matrix, plasmid_CE_annotations_mpspades$mpspades_detection)
print(mpspades_dispersion)
anova(mpspades_disperson)
# check homogeneity of dispersion
mpspades_dispersion <- betadisper(mpspades_metadata_distance_matrix, plasmid_CE_annotations_mpspades$mpspades_detection)
print(mpspades_dispersion)
anova(mpspades_dispersion)
install.packages("FSA")
library(FSA)
kruskal.test(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
mpspades_data <- read.csv("mpspades_heatmap.csv", row.names = 1)
megahit_data <- read.csv("megahit_heatmap.csv", row.names=1)
# read in metadata
plasmid_CE_annotations <- read.csv("plasmid_CE_metadata.txt", row.names=1, sep="\t")
# grab only metadata of interest for annotation
filtered_plasmid_CE_annotations <- subset(plasmid_CE_annotations, select = c(num_gene_calls, GC_content))
# other columns: num_gene_calls, GC_content, contig_length, coverage, mpspades_genomad_0_block, mpspades_genomad_plasx_0_block, megahit_genomad_0_block, megahit_genomad_plasx_0_block
# contig length and coverage are of the original plasmid circular element reference genome, not of the assemblies
# GC content and num_gene_calls are also of the original plasmid circular element reference genome
# for genomad_plasx_0 block, I took CEs with 0 detection by genomad and plasx (0.9 threshold) across all CAMI2 samples for that classifier
library(pheatmap)
library(RColorBrewer)
#color_scheme <- colorRampPalette(c("red", "yellow", "blue"))(100)
annotation_colors <- list(contig_length = colorRampPalette(brewer.pal(3,'PuBu'))(100),
coverage = colorRampPalette(brewer.pal(3, 'Spectral'))(100))
pheatmap(mpspades_data,
main = "Metaplasmidspades Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
pheatmap(megahit_data,
main = "Megahit Plasmid Reference Detection Rates (%)",
show_rownames = FALSE,
color = colorRampPalette(brewer.pal(3, 'RdYlBu'))(100),
annotation_row = filtered_plasmid_CE_annotations,
annotation_names_row = F)
plasmid_CE_annotations <- read.csv("plasmid_CE_metadata.txt", sep="\t")
library(ggplot2)
library(tidyverse)
plasmid_CE_long <- plasmid_CE_annotations %>%
select(mpspades_detection, GC_content, num_gene_calls, coverage) %>%
pivot_longer(cols = c(GC_content, num_gene_calls, coverage),
names_to = "metric",
values_to = "value")
# drop #N/A
plasmid_CE_long_filtered <- plasmid_CE_long[plasmid_CE_long$mpspades_detection != "#N/A", ]
ggplot(plasmid_CE_long_filtered, aes(x = mpspades_detection, y = value, fill = mpspades_detection)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("detected" = "blue",
"undetected_genomad" = "darkorange",
"undetected_genomad_plasx" = "red")) +
labs(title = "Plasmid characteristics by detection group (mpspades)", fill = "Detection Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
facet_wrap(~ metric, scales = "free_y", nrow = 1,
labeller = labeller(metric = c("coverage" = "Coverage",
"GC_content" = "GC Content (%)",
"num_gene_calls" = "Number of Gene Calls")))
plasmid_CE_long_megahit <- plasmid_CE_annotations %>%
select(megahit_detection, GC_content, num_gene_calls, coverage) %>%
pivot_longer(cols = c(GC_content, num_gene_calls, coverage),
names_to = "metric",
values_to = "value")
ggplot(plasmid_CE_long_megahit, aes(x = megahit_detection, y = value, fill = megahit_detection)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("detected" = "blue",
"undetected_genomad" = "darkorange",
"undetected_genomad_plasx" = "red")) +
labs(title = "Plasmid characteristics by detection group (megahit)", fill = "Detection Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
facet_wrap(~ metric, scales = "free_y", nrow = 1,
labeller = labeller(metric = c("coverage" = "Coverage",
"GC_content" = "GC Content (%)",
"num_gene_calls" = "Number of Gene Calls")))
library(dplyr)
# str(plasmid_CE_annotations)
# summary(plasmid_CE_annotations)
# table(plasmid_CE_annotations$mpspades_detection)
table(plasmid_CE_annotations$megahit_detection)
# remove the NA for megahit analysis
plasmid_CE_annotations_mpspades <- plasmid_CE_annotations[plasmid_CE_annotations$mpspades_detection != "#N/A", ]
library(car)
# test for homogeneity of variances
leveneTest(num_gene_calls ~ mpspades_detection, data= plasmid_CE_annotations_mpspades)
#variances are not significantly different
leveneTest(GC_content ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
# variances are significantly different
leveneTest(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
leveneTest(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations)
# variances are not significantly different
leveneTest(GC_content ~ megahit_detection, data = plasmid_CE_annotations)
leveneTest(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations)
library(vegan)
# metaplasmidspades
metadata_mpspades_matrix <- plasmid_CE_annotations_mpspades[, c("num_gene_calls", "GC_content", "coverage")]
# rescale the variables
metadata_mpspades_matrix_scaled <- scale(metadata_mpspades_matrix)
# distance matrix (euclidean distance)
mpspades_metadata_distance_matrix <- dist(metadata_mpspades_matrix_scaled)
#mpspades
kruskal.test(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
1+1
kruskal.test(GC_content ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
kruskal.test(coverage ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
kruskal.test(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations)
kruskal.test(GC_content ~ megahit_detection, data = plasmid_CE_annotations)
{r}
kruskal.test(coverage ~ megahit_detection, data = plasmid_CE_annotations)
oneway.test(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
oneway.test(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades, var.equal = TRUE)
library(car)
# test for homogeneity of variances
leveneTest(num_gene_calls ~ mpspades_detection, data= plasmid_CE_annotations_mpspades)
#variances are not significantly different
leveneTest(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
leveneTest(GC_content ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
# variances are significantly different
# p = 0.094
leveneTest(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
# p
oneway.test(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades, var.equal = TRUE)
leveneTest(coverage ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
# p
leveneTest(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations)
# variances are not significantly different
leveneTest(GC_content ~ megahit_detection, data = plasmid_CE_annotations)
leveneTest(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations)
oneway.test(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades, var.equal = TRUE)
oneway.test(GC_content ~ mpspades_detection, data = plasmid_CE_annotations_mpspades,
var.equal = FALSE)
# p = 0.01
oneway.test(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades, var.equal = TRUE)
# p = 0.01
oneway.test(GC_content ~ mpspades_detection, data = plasmid_CE_annotations_mpspades,
var.equal = FALSE)
# p = 0.54
oneway.test(coverage ~ mpspades_detection, data = plasmid_CE_annotations_mpspades,
var.equal = TRUE)
# for megahit
oneway.test(coverage ~ megahit_detection, data = plasmid_CE_annotations,
var.equal = TRUE)
oneway.test(GC_content ~ megahit_detection, data = plasmid_CE_annotations,
var.equal = FALSE)
oneway.test(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations,
var.equal = TRUE)
# for megahit
#oneway.test(coverage ~ megahit_detection, data = plasmid_CE_annotations,
var.equal = TRUE)
# for megahit
# oneway.test(coverage ~ megahit_detection, data = plasmid_CE_annotations, var.equal = TRUE)
# p = 0.28
megahit_GC_anova <- oneway.test(GC_content ~ megahit_detection, data = plasmid_CE_annotations,
var.equal = FALSE)
# p = 0.0001
megahit_gene_call_anova <- oneway.test(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations,
var.equal = TRUE)
# p = 0.011
TukeyHSD(megahit_GC_anova, conf.level = 0.95)
TukeyHSD(megahit_GC_anova, conf.level = 0.95)
# for megahit
# oneway.test(coverage ~ megahit_detection, data = plasmid_CE_annotations, var.equal = TRUE)
# p = 0.28
megahit_GC_anova <- oneway.test(GC_content ~ megahit_detection, data = plasmid_CE_annotations,
var.equal = FALSE)
# p = 0.0001 from Welch's ANOVA
megahit_gene_call_anova <- aov(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations,)
# p = 0.011 from ANOVA
install.packages("userfriendlyscience")
install.packages("rstatix")
# for megahit
# oneway.test(coverage ~ megahit_detection, data = plasmid_CE_annotations, var.equal = TRUE)
# p = 0.28
megahit_GC_anova <- oneway.test(GC_content ~ megahit_detection, data = plasmid_CE_annotations,
var.equal = FALSE)
# p = 0.0001 from Welch's ANOVA
megahit_gene_call_anova <- aov(num_gene_calls ~ megahit_detection, data = plasmid_CE_annotations)
# p = 0.011 from ANOVA
TukeyHSD(megahit_gene_call_anova, conf.level = 0.95)
library(rstatix)
games_howell_test(plasmid_CE_annotations, GC_content ~ megahit_detection, conf.level = 0.95, detailed = FALSE)
# for mpspades
mpspades_gene_calls_anova <- oneway.test(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades, var.equal = TRUE)
# p = 0.01
oneway.test(GC_content ~ mpspades_detection, data = plasmid_CE_annotations_mpspades,
var.equal = FALSE)
# p = 0.54
oneway.test(coverage ~ mpspades_detection, data = plasmid_CE_annotations_mpspades,
var.equal = TRUE)
#p = 0.255
TukeyHSD(mpspades_gene_calls_anova, conf.level = 0.95)
# for mpspades
mpspades_gene_calls_anova <- aov(num_gene_calls ~ mpspades_detection, data = plasmid_CE_annotations_mpspades)
# p = 0.01
oneway.test(GC_content ~ mpspades_detection, data = plasmid_CE_annotations_mpspades,
var.equal = FALSE)
# p = 0.54
oneway.test(coverage ~ mpspades_detection, data = plasmid_CE_annotations_mpspades,
var.equal = TRUE)
#p = 0.255
TukeyHSD(mpspades_gene_calls_anova, conf.level = 0.95)
